/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'jhughes' at '12/9/16 1:26 PM' with Gradle 3.2
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.2/userguide/tutorial_java_projects.html
 */

import org.apache.tools.ant.filters.ReplaceTokens

buildscript {    // Configuration for building
  repositories {
    jcenter()    // Bintray's repository - a fast Maven Central mirror & more
    mavenCentral()
  }
  dependencies {
    classpath 'org.akhikhl.gretty:gretty:+'
  }
}

repositories {   // repositories for Jar's you access in your code
  maven {
    url 'https://maven-central.storage.googleapis.com'             // Google's mirror of Maven Central
    //   url 'https://oss.sonatype.org/content/repositories/snapshots' // SNAPSHOT Repository (if needed)
  }

  // Use 'jcenter' for resolving your dependencies.
  // You can declare any Maven/Ivy/file repository here.
  jcenter()
  mavenCentral()
}

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'org.akhikhl.gretty'

group = "net.nanopay"   // Generated output GroupId
version = "1.0-SNAPSHOT"    // Version in generated output

sourceCompatibility = 1.8
targetCompatibility = 1.8

// In this section you declare the dependencies for your production and test code
dependencies {
  //providedCompile "javax.servlet:servlet-api:2.5"
  providedCompile "javax.servlet:javax.servlet-api:3.1.0"

  // The production code uses the SLF4J logging API at compile time
  compile group: "org.slf4j", name: "slf4j-api", version: "1.7.25"
  compile group: 'joda-time', name: 'joda-time', version: '2.9.9'

  // FOAM dependencies
  compile group: "javax.json", name: "javax.json-api", version: "1.0"
  compile group: "javax.mail", name: "mail", version: "1.4.7"
  compile group: "javax.mail", name: "javax.mail-api", version: "1.5.5"
  compile group: 'jstl', name: 'jstl', version: '1.2'
  compile group: "org.apache.commons", name: "commons-dbcp2", version: "2.0.1"
  compile group: "org.apache-extras.beanshell", name: "bsh", version: "2.0b6"
  compile group: "com.google.api-client", name: "google-api-client", version: "1.22.0"
  compile group: "org.jtwig", name: "jtwig-core", version: "5.86.1.RELEASE"
  compile group: 'org.mongodb', name: 'mongodb-driver', version: '3.4.2'
  compile group: "org.postgresql", name: "postgresql", version: "42.0.0"
  compile group: 'org.java-websocket', name: 'Java-WebSocket', version: '1.3.4'
  compile group: "com.authy", name: "authy-java", version: "1.1.0"
  compile group: "org.bouncycastle", name: "bcpkix-jdk15on", version: "1.57"
  compile group: "org.bouncycastle", name: "bcprov-jdk15on", version: "1.57"

  // Dependency for your favourite test framework you want to use in your tests.
  // TestNG is also supported by the Gradle Test task. Just change the
  // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
  // 'test.useTestNG()' to your build script.
  testCompile "junit:junit:4.12"

  // foam snapshot copied here
  compile fileTree(dir: 'build/libs', include: '*.jar')
}

sourceSets {
  main {
    java {
      srcDir "build/src/java"
      srcDir "src/main"
    }
  }
}

jar {
    project.logger.info('jar.archive', jar.archivePath)
    manifest {
        attributes 'Implementation-Title': 'HelpDesk'
    }
}

war {
  from("build/webapp/")
  from("src/main/data/") {
    include "*.csv"
    into ("data")
  }
}

task generateJavaSource(type:Exec) {
  commandLine './tools/build.sh'
  args = ['-j']
}

compileJava {
  dependsOn generateJavaSource
}
